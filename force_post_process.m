%Post-processing for Wind Tunnel Airfoil Tests
%Sean Patrick Devey
%9_27_19

%Purpose: reads in raw tab delimited data files generated by "LoadCell DAQ wForceCalc V3 SPD" LabVIEW prgm
%Requires Matlab functions: data_import.m, nondim_mom.m, nondim_force.m
%files must not have .xls file extensions. Tab delimited .dat works well.
%reference data files are good to have as well, should be in .xlsx with columns: aoa, cx
%Units are assumed to be SI
%% initialize data locations and important parameters
clear; %close all;
%clc;

%
%keep figures where they are for next run
for m=1:length(findobj('type','figure'))
    figure(m)
    clf('reset');
end
%}

current_folder = pwd;
% data_folder = strcat(current_folder,'\microflaps');
% theta = 151.6; %angle (deg) CCW offset mini45 x to airfoil
% data_folder = strcat(current_folder,'\control_mini40');
% theta = 33; %angle (deg) CCW offset mini40 x to airfoil
aoa_offset = 0; %(deg) offset for airfoil aoa
% data_folder = strcat(current_folder,'\control_mini45\11_18_19');
data_folder = strcat(current_folder,'\control_mini45\1_21_20');
theta = 81.5; %angle (deg) CCW offset mini45 x to airfoil
% % %87?
% % aoa_offset = 0; %(deg) offset for airfoil aoa
% data_folder = strcat(current_folder,'\control_mini45\11_18_19\-22_to_22');
% theta = 81.5; %angle (deg) CCW offset mini45 x to airfoil
% aoa_offset = 0; %(deg) offset for airfoil aoa
% speed_factor  = 1.00958/1.0216;
speed_factor  = 1;
%data_folder = 'C:\Users\seanp\Documents\Box Sync\Everything\Documents\Research\Fall 2019 - Spring 2020\Data\control tests\9_20_19';
ref_data_loc_cd = strcat(current_folder,'\formatted reference data\NACA0012 RE360000 cd_full sandia78.xlsx');
ref_data_loc_cl = strcat(current_folder,'\formatted reference data\NACA0012 RE360000 cl sandia78.xlsx');
ref_data_loc_cm = strcat(current_folder,'\formatted reference data\NACA0012 RE360000 cm sandia78.xlsx');
num_pts = 10; %number of points in buffer, maybe should automate finding this value?
chord = 8*2.54/100; %airfoil chord in meters
span = 11.8125*2.54/100; %airfoil span in meters new one is at 11+7/8, old at 11+13/16
mu = 1.81*10^-5; %dynamic viscosity (kg/(ms))
% theta = 30; %angle (deg) CCW offset mini40 x to airfoil x
% theta = 82.45; %angle (deg) CCW offset mini45 x to airfoil
% aoa_offset = 7; %(deg) offset for airfoil aoa


%info for uncertainty analysis
prob = 0.05; %prob used to find confidence interval for error bars 0.05 => 95% confidence interval
force_bias = .145;%0.125+0.02; %(N) estimated bias in load cell force measurements (resolution +drift)
% force_bias = 2.9; %measurement uncertainty from manufacturer
%force_bias = 1 N ish near highest load case? need to investigate more to find better estimate of error as function of Fx, Fy, resultant angle, or Tx, Ty?
moment_bias = 0.0013+0.005; %(Nm) estimated bias in load cell moment measurements
%% read data and extract relevant info
%could add functionality to:
%calc stdev of each group? Check for outliers?
%check column names in case order changes

data = data_import(data_folder,num_pts);
[row, col, run] = size(data);
%% check that drift of forces are not large, nulling was okay. remove rows of zeros
zero_rows = zeros(row,run); %initialize marker for if rows contain zero data
for i=1:row
    for k=1:run
        if data(i,1,k) == 0 %if speed is 0
            if abs(data(i,4,k))> .2 || abs(data(i,5,k))> .2 || abs(data(i,6,k))> 1     %if Fx Fy or Fz are greater than assigned limits
                error(strcat('This force data may have drifted too much. Check run: ',num2str(k),' line: ',num2str(i)));
            else %want to delete these zero rows but need to maintain rectangularity of 3D data matrix
                zero_rows(i,k)=1; %update marker to indicate that the current row has only zero data
            end
        end
    end
end

zero_index=[];
for i=1:row %this loop exists to check that every run agrees on where the zero rows are before deleting them
    if sum(zero_rows(i,:))==run  %if every value in the row is 1
        zero_index = [zero_index,i]; %add index to list of zero rows
    elseif sum(zero_rows(i,:))==0 %if every value in the row is 0
        continue
    else
        error('Woah! Some of the runs have zeros where the others do not. Check out the zero_rows matrix for more info');
    end
end
data(zero_index,:,:)=[];    %remove zero rows
[row, col, run] = size(data);   %update matrix dimensions
%% apply correction for load cell bias
res_angle = atan2d(data(:,5,:),data(:,4,:)); %angle CCW from positive x axis on load cell to resultant force measured
res_angle = reshape(res_angle,row,run);
res = sqrt(data(:,4,:).^2+data(:,5,:).^2); %resultant force
res = reshape(res,row,run);
data_fix = data;
%need to add functions here to interpolate on measured error from load cell to estimate error here
Diff_Fx_est = zeros(row,run);
Diff_Fy_est = zeros(row,run);
for k=1:run
    [Diff_Fx_est(:,k),Diff_Fy_est(:,k)] = Mini45_Fx_Fy_error(res(:,k),res_angle(:,k));
    data_fix(:,4,k) = data_fix(:,4,k)+Diff_Fx_est(:,k);
    data_fix(:,5,k) = data_fix(:,5,k)+Diff_Fy_est(:,k);
end
data = cat(3,data,data_fix); %add corrected data to end of raw data to do all processing at once
[row,col,run] = size(data);
%% apply load cell correction matrix
% corr_mat_loc = fopen("C:\Users\seanp\Documents\Box Sync\Everything\Documents\Research\Fall 2018 - Summer 2019\2019 wind tunnel experiment\Data\apparatus_range test\load cell accuracy\mini45\1-30-20\correction_matrix.dat",'r');
% c = fscanf(corr_mat_loc,'%f %f %f %f %f\n\n',[5,5])';
% fclose(corr_mat_loc);
% data2_t = zeros(5,16,8);
% data2 = zeros(16,5,8);
% for k=1:run
%     data2_t(:,:,k) = c\data(:,[4,5,7,8,9],k)';
%     data2(:,:,k) = data2_t(:,:,k)';
% end
% data2 = [data(:,1:3,:),data2(:,1:2,:),data(:,6,:),data2(:,3:5,:)];
% data = cat(3,data,data2); %add corrected data to end of raw data to do all processing at once
% [row,~,run] = size(data);
%% check direction of data sweep, reorder vectors
up_down = zeros(1,k);   %initialize up_down (a vector with a flag for up or down)
%up_down(k)=1 means run(k) sweeps upward
%up_down(k)=0 means run(k) sweeps downward
%up_down(k)=2 means run(k) doesn't sweep upward or downward
for k=1:run
    if data(2,3,k)<data(3,3,k) %if aoa 2 is less than aoa 3
        if data(5,3,k)<data(6,3,k) %if aoa 5 < aoa 6 (this should be more robust, but probably fine for now I guess)
            up_down(k) = 1; %flag =1 indicates sweep from low aoa to high
            data(:,:,k) = flip(data(:,:,k)); %flips data from this run to match upward seep data
        else
            up_down(k) = 2; %should not happen unless a mistake was made in data aquisition
        end
    elseif data(2,3,k)>data(3,3,k) %if aoa 2 is > aoa 3
        if data(5,3,k)>data(6,3,k) %if aoa 5 < aoa 6
            up_down(k) = 0; %flag =0 indicates sweep from high aoa to low
        else
            up_down(k) = 2; %should not happen unless a mistake was made in data aquisition
        end
    else
        up_down(k) = 2; %should not happen unless a mistake was made in data aquisition
    end
end
%% coordinate transform load cell axis to wind axis
%AOA + theta = transform_angle between load cell x and wind x
%mini45 -y is aligned to airfoil x (airfoil x out LE)
%mini40 x is 30 CW to airfoil x
%theta defined in initialization section

%column order: speed, AOA, Drag, Lift, Mom_z
data_wind = zeros(row,5,run);   %initialize new matrix for wind axis values
data_wind(:,1,:) = data(:,1,:)*speed_factor; %copy speed column, apply correction to data from 11_17_19
data_wind(:,2,:) = data(:,3,:)+aoa_offset; %copy aoa column
for i=1:row
    for k=1:run
        aoa = data(i,3,k)+aoa_offset; %angle between airfoil x and wind x
        %         data_wind(i,3,k) = data(i,4,k)*sind(aoa)-data(i,5,k)*cosd(aoa); %drag = Fx*sin(aoa)-Fy*cos(aoa) Mini45 SAME as formula 3 when theta=90
        %         data_wind(i,4,k) = data(i,4,k)*cosd(aoa)+data(i,5,k)*sind(aoa); %lift = Fx*cos(aoa)+Fy*sin(aoa) Mini45 SAME as formula 4 when theta=90
        data_wind(i,3,k) = data(i,4,k)*cosd(theta-aoa)-data(i,5,k)*sind(theta-aoa); %drag, formula 3
        data_wind(i,4,k) = data(i,4,k)*sind(theta-aoa)+data(i,5,k)*cosd(theta-aoa); %lift, formula 4
        data_wind(i,5,k) = data(i,9,k); %moment z
    end
end
data_wind_nbc = data_wind; %save data before applying buoyancy correction ("nbc" = "no buoyancy correction")
%% horizontal buoyancy drag correction
% see p. 353 "Low Speed Wind Tunnel Testing" by Rae, Pope
dp_dl = -13.8;              %streamwise static pressure gradient (Pa/m) at model location (got this from pressure gradient measured 9.20.19, originally estimated -5 from old data)
Lambda = 0.24;              %airfoil geometry factor for NACA 0012 (graph p. 352)
height = 36*2.54/100;       %wind tunnel "height" in m (height because the airfoil is on its side, really width for us)
sigma = pi^2/48*(chord/height)^2;
Drag_delta = -6*height^2/pi*Lambda*sigma*dp_dl;     %estimated drag effect due to horizontal buoyancy
data_wind(:,3,:)=data_wind(:,3,:)-Drag_delta;       %correct drag measurements for horizontal buoyancy
%% non-dimensionalize data/calculate aerodynamic coeffs
rho = zeros(1,run); %initializing variables for efficiency
q = zeros(1,run);
for k=1:run
    rho(k) = mean(data(:,2,k));                 %average density for each run
    q(k) = .5*rho(k)*mean(data_wind(:,1,k))^2;  %average dynamic pressure for each run
end

data_coef = zeros(row,5,run);   %initializing array for non-dim data
data_coef(:,1:2,:) = data_wind(:,1:2,:);    %copying speed, aoa columns
data_coef_nbc=data_coef;    %initializing array for non-dim data without any tunnel effect corrections
for i=1:row
    for k=1:run
        data_coef(i,3,k) = nondim_force(data_wind(i,3,k),q(k),chord,span); %section drag coef
        data_coef_nbc(i,3,k) = nondim_force(data_wind_nbc(i,3,k),q(k),chord,span); %section drag coef, uncorrected for buoyancy
        data_coef(i,4,k) = nondim_force(data_wind(i,4,k),q(k),chord,span); %section lift coef
        data_coef(i,5,k) = nondim_mom(data_wind(i,5,k),q(k),chord,span); %section pitching mom coef
    end
end
data_coef_nbc(:,4:5,:) = data_coef(:,4:5,:);    %corrections have not been applied to lift and moment yet, so copy these to the uncorrected data array
[row, col, run] = size(data_coef);   %update matrix dimensions, changing variables that had previously been used
% column order is now: speed, aoa, c_d, c_l, c_m1/4
%% calculate & apply wall corrections
%solid blockage correction (p. 355 "Low Speed Wind Tunnel Testing" by Rae and Pope)
volume_foil = 0.7*.12*chord^2*12*2.54/100; %approximate volume of airfoil model (m^3)
K = 0.52;   %value for an airfoil spanning tunnel height (p. 355)
del = .55/100;          %Boundary layer thickness (m) at test location (panel 1) as measured by J. Morris in 2016
del_star = del/6;       %Approx displacement thickness (m) at test location
A_section1 = (36*2.54/100)*(12*2.54/100); %cross sectional area of tunnel (m^2)
A_section = (36*2.54/100-2*del_star)*(12*2.54/100-2*del_star); %cross sectional area of tunnel minus BL (m^2)
epsilon_sb = K*volume_foil/A_section^(3/2);
%wake blockage correction and sreamline curvature correction (p. 355, p.359 "Low Speed Wind Tunnel Testing" by Rae and Pope)
epsilon_wb = zeros(row,run);
epsilon = zeros(row,run);
data_coef_corr = zeros(row,col,run); %new array to store data after solid blockage, wake blockage, and streamline curvature corrections. Consider overwrting data_coef, would that mess up the wake gradient cdo correction?
for k=1:run
    for i=1:row
        epsilon_wb(i,k) = chord/height/2*data_coef(i,3,k);              %wake blockage correction
        epsilon(i,k) = epsilon_sb+epsilon_wb(i,k);
        data_coef_corr(i,1,k) = data_coef(i,1,k)*(1+epsilon(i,k));      %correct velocity, note that q changes as well
        data_coef_corr(i,2,k) = data_coef(i,2,k) + 57.3*sigma/2/pi*(data_coef(i,4,k) + 4*data_coef(i,5,k));    %streamline curvature correction to aoa (Eqn. 6.20)
        data_coef_corr(i,4,k) = data_coef(i,4,k)*(1-sigma-2*epsilon(i,k));      %correction to lift coefficient (Eqn. 6.21)
        data_coef_corr(i,5,k) = data_coef(i,5,k)*(1-2*epsilon(i,k))+sigma*data_coef_corr(i,4,k)/4;  %correction to pitching moment coefficient (Eqn. 6.22)
    end
end
%% correction for wake gradient, q on c_do
%there is a separate correction for c_do from the dynamic pressure effect
%along with the wake gradient term. See Wind Tunnel Testing by Rae, Pope, p. 360, 357
loc_aoa_0 = zeros(1,2);
for k=1:run
    loc_aoa_0 = find(~data(:,3,k)); %finds the rows that have 0 aoa
    [x,y] = size(loc_aoa_0);
    if y >= 2 %just to check that nothing weird is being ignored
        error(strcat('Yo, there are more than two zero angle of attack rows in file: ',num2str(k)))
    end
    
    if up_down(k) == 1 %if upward sweep
        %take first zero aoa as c_do position
        c_do = data_coef(loc_aoa_0(1),3,k);     %zero lift drag coef is at the first zero aoa row, 3rd col, kth run in data_coef matrix
    elseif up_down(k) == 0 %if downward sweep
        %take second zero aoa as c_do position
        c_do = data_coef(loc_aoa_0(2),3,k);
    else
        c_do = data_coef(loc_aoa_0(1),3,k); %just use first time at 0 aoa to define cdo if sweep is wonked
    end
    
    for i=1:row     %apply the c_do correction to all drag coef values
        delta_cdo = -c_do*(3*epsilon_sb+2*epsilon_wb(i,k)); %zero-lift drag coefficient adjustment for dyn pressure and wake gradient effects
        data_coef_corr(i,3,k) = data_coef(i,3,k) + delta_cdo; %drag coefficient adjustment
    end
end
%% find mean speed, Re. check that all runs were same tunnel speed
mean_speed = mean(mean(data_coef_corr(:,1,:))); % vector containing the average of all speeds measured for each run
speed_tol = 2; %tolerance of drift in speed measurement (m/s)
if (max(data_coef_corr(:,1,:)) >= (mean_speed+speed_tol)) %make sure there isn't some data at a different speed getting mixed in
    error('the speed somewhere is too high')
end
if (min(data_coef_corr(:,1,:)) <= (mean_speed-speed_tol))
    error('the speed somewhere is too low') %not very helpful error messages, but will prevent from being dumb
end
Re = round(mean_speed*mean(rho)*chord/mu,-4); %round RE to nearest 10,000
%% average all runs, calculate uncertainty of load measurements
B_f = nondim_force(force_bias,mean(q),chord,span); %bias of force measures
% B_m = nondim_mom(moment_bias,mean(q),chord,span); %bias of moment measures
% Bias = [0,0,B_f,B_f,B_m];
run = run/2;
t_score = tcdf(prob,run-1);
u = zeros(row,col);
u_fix=u;
data_coef_corr_mean = zeros(row,col);
% data_coef_corr_mean_cal = zeros(row,col);
data_coef_corr_mean_fix = zeros(row,col);
Bias = zeros(col,1);
for i=1:row
    for j=1:col
        data_coef_corr_mean(i,j) = mean(data_coef_corr(i,j,1:run));
        sigma = std(data_coef_corr(i,j,1:run));
        P95 = sigma*t_score/sqrt(run); %calc 95% confidence interval
        Bias(j) = 0.01*data_coef_corr_mean(i,j); %apply some sort of bias thing. This currently says that bias is 10% of measurement, which is not really true.
        u(i,j) = sqrt(Bias(j)^2+P95^2);
        data_coef_corr_mean_fix(i,j) = mean(data_coef_corr(i,j,run:2*run));
        sigma_fix = std(data_coef_corr(i,j,run:2*run));
        P95_fix = sigma_fix*t_score/sqrt(run/2); %calc 95% confidence interval
        u_fix(i,j) = sqrt(Bias(j)^2+P95_fix^2);
    end
end
%% load in reference data for validation
aoa_max = max(max(data_coef_corr(:,2,:))); %find max aoa of measured data

data_ref_cd = xlsread(ref_data_loc_cd); %need to define the data location in first code section
data_ref_cl = xlsread(ref_data_loc_cl);
data_ref_cm = xlsread(ref_data_loc_cm);
%trimming reference data to match the aoa range of measured data
max_ref_index = find(data_ref_cd(:,1)>=aoa_max, 1); %find position of first data point in data_ref_cdcl that is at a higher aoa than the highest measured data
data_ref_cd = data_ref_cd(1:max_ref_index,:,:); %trim off reference data that extends beyond measured data
max_ref_index = find(data_ref_cl(:,1)>=aoa_max, 1); %find position of first data point in data_ref_cdcl that is at a higher aoa than the highest measured data
data_ref_cl = data_ref_cl(1:max_ref_index,:,:); %trim off reference data that extends beyond measured data
max_ref_index = find(data_ref_cm(:,1)>=aoa_max, 1); %find position of first data point in data_ref_cm that is at a higher aoa than the highest measured data
data_ref_cm = data_ref_cm(1:max_ref_index,:); %trim off reference data that extends beyond measured data
%% dimensionalize reference data to match our airfoil
data_ref_D = [data_ref_cd(:,1),data_ref_cd(:,2)*mean(q)*chord*span];
data_ref_L = [data_ref_cl(:,1),data_ref_cl(:,2)*mean(q)*chord*span];
data_ref_L(7:2:end,:)=[]; %remove rows that aren't reported for drag to make aoa column the same
data_ref_M = [data_ref_cm(:,1),data_ref_cm(:,2:3)*mean(q)*chord^2*span];
%% Transform reference data to body axis
Fx_ref = data_ref_D; %initialize
Fy_ref = data_ref_D; %initialize
for i=1:length(data_ref_L)
    Fy_ref(i,2) = data_ref_L(i,2)*cosd(theta-data_ref_D(i,1)) - data_ref_D(i,2)*sind(theta-data_ref_D(i,1));    %this is the reverse of the transform used to get measured data into the wind frame
    Fx_ref(i,2) = data_ref_D(i,2)*cosd(theta-data_ref_D(i,1)) + data_ref_L(i,2)*sind(theta-data_ref_D(i,1));
end
%% plot raw measured forces
fig_count=0;
%{
legend_location = ["southeast","northwest","northeast","southeast","southeast","northeast"];
ylimits = [ [0, 9]; [-.75, 2.5]; [-1,0]; [-.25,.1]; [0,1.5]; [-0.3,0.1] ]; %sizes of coef plots
col_name_N = ["F_x (N)","F_y (N)","F_z (N)","T_x (N m)","T_y (N m)","T_z (N m)"]; %column headers for force matrix
%raw data in unadjusted load cell frame (N)
for j=4:5
    fig_count=fig_count+1;
    figure(fig_count)
    hold on
    for k=1:run
        if up_down(k) == 1
            p1 = plot(data(:,3,k),data(:,j,k),'ro','DisplayName','upward sweep');
        elseif up_down(k) == 0
            p2 = plot(data(:,3,k),data(:,j,k),'r+','DisplayName','downward sweep');
        else
            plot(data(:,3,k),data(:,j,k),'gx','DisplayName','allweird sweep')
        end
    end
    for k=run+1:2*run
        if up_down(k) == 1
            p1 = plot(data(:,3,k),data(:,j,k),'ko','DisplayName','upward sweep fix');
        elseif up_down(k) == 0
            p2 = plot(data(:,3,k),data(:,j,k),'k+','DisplayName','downward sweep fix');
        else
            plot(data(:,3,k),data(:,j,k),'gx','DisplayName','allweird sweep fix')
        end
    end
    if j==4 %if plotting Fx
        p3 = plot(Fx_ref(:,1),Fx_ref(:,2),'bo','DisplayName','ref. data');
    elseif j==5 %if plotting Fy
        p3 = plot(Fy_ref(:,1),Fy_ref(:,2),'bo','DisplayName','ref. data');
    elseif j==9 %if plotting M
        p3 = plot(data_ref_M(:,1),data_ref_M(:,3),'bo','DisplayName','ref. data (up sweep)');
        p4 = plot(data_ref_M(:,1),data_ref_M(:,2),'b+','DisplayName','ref. data (down sweep)');
    end
    xlabel('\alpha (deg)')
    ylabel(strcat(col_name_N(j-3),' (raw)'))
    xlim([0,25])
    ylim(ylimits(j-3,:))
    legend()
    %legend('Location',legend_location(j-3))
    title(strcat("raw forces v. ref. data, ",' U = ',num2str(mean_speed,3),' m/s ',' Re = ',num2str(Re,3)))
end
%}
%% plot raw drag/lift/moment
%{
legend_location = ["northwest","southeast","northeast"];
col_name_N = ["speed (m/s)","aoa (deg)","D (N)","L (N)","M_z (N m)"]; %column headers for force matrix
ylimits = [ [-1, 4]; [0, 10]; [-0.3,0.1] ]; %sizes of coef plots
%raw data in wind frame (N)
for j=3:col
fig_count=fig_count+1;
figure(fig_count)
hold on
for k=1:run
    if up_down(k) == 1
        p1 = plot(data_wind(:,2,k),data_wind(:,j,k),'ro','DisplayName','upward sweep');
    elseif up_down(k) == 0
        p2 = plot(data_wind(:,2,k),data_wind(:,j,k),'r+','DisplayName','downward sweep');
    else
        plot(data_wind(:,2,k),data_wind(:,j,k),'gx','DisplayName','allweird sweep')
    end
end
    if j==3 %if plotting D
        p3 = plot(data_ref_D(:,1),data_ref_D(:,2),'bo','DisplayName','ref. data');
        p4 = plot([],'HandleVisibility','off'); %this avoids error in legend by making sure a plot p4 exists even if there is no downward sweep data
    elseif j==4 %if plotting L
        p3 = plot(data_ref_L(:,1),data_ref_L(:,2),'bo','DisplayName','ref. data');
        p4 = plot([],'HandleVisibility','off'); %this avoids error in legend by making sure a plot p4 exists even if there is no downward sweep data
    elseif j==5 %if plotting M
        p3 = plot(data_ref_M(:,1),data_ref_M(:,3),'bo','DisplayName','ref. data (up sweep)');
        p4 = plot(data_ref_M(:,1),data_ref_M(:,2),'b+','DisplayName','ref. data (down sweep)');
    end
xlabel('\alpha (deg)')
ylabel(strcat(col_name_N(j),' (raw)'))
xlim([0,25])
ylim(ylimits(j-2,:))
legend([p1,p2,p3,p4],'Location',legend_location(j-2))
title(strcat("wind frame forces v. ref. data, ",' U = ',num2str(mean_speed,3),' m/s ',' Re = ',num2str(Re,3)))
end
%}
%% plot unadjusted coefficients
col_name = ["speed (m/s)","aoa (deg)","c_d","c_l","c_{m_{c/4}}"]; %names of columns for coef matrixes
ylimits = [ [0, .4]; [0, 1]; [-0.1,0.04] ]; %sizes of coef plots
legend_location = ["northwest","southeast","northeast"];
%{
for j=3:col %unadjusted coefficients
fig_count=fig_count+1;
figure(fig_count)
hold on
for k=1:run
    if up_down(k) == 1
        p1 = plot(data_coef_nbc(:,2,k),data_coef_nbc(:,j,k),'ro','DisplayName','upward sweep');
    elseif up_down(k) == 0
        p2 = plot(data_coef_nbc(:,2,k),data_coef_nbc(:,j,k),'r+','DisplayName','downward sweep');
    else
        plot(data_coef_nbc(:,2,k),data_coef_nbc(:,j,k),'gx','DisplayName','allweird sweep')
    end
end
xlabel('\alpha (deg)')
ylabel(strcat(col_name(j),' (raw)'))
xlim([0,25])
ylim(ylimits(j-2,:))
legend('Location',legend_location(j-2))
title(strcat("unadjusted data, ",'U = ',num2str(mean_speed,3),' m/s ',' Re = ',num2str(Re,3)))
end
%}
%% plot adjusted coefficients
%{
for j=3:col %plot each of the coefs
fig_count=fig_count+1;
figure(fig_count)
hold on
for k=1:run
    if up_down(k) == 1
        p1 = plot(data_coef_corr(:,2,k),data_coef_corr(:,j,k),'ro','DisplayName','upward sweep');
    elseif up_down(k) == 0
        p2 = plot(data_coef_corr(:,2,k),data_coef_corr(:,j,k),'r+','DisplayName','downward sweep');
    else
        plot(data_coef_corr(:,2,k),data_coef_corr(:,j,k),'gx','DisplayName','allweird sweep')
    end
end
xlabel('\alpha (deg)')
ylabel(strcat(col_name(j),' (adjusted)'))
xlim([0,25])
ylim(ylimits(j-2,:))
legend('Location',legend_location(j-2))
title(strcat("adjusted data, ",'U = ',num2str(mean_speed,3),' m/s ',' Re = ',num2str(Re,3)))
end
%}
%% plot adjusted and unadjusted coefficients
%{
for j=3:col %cycle through each plot
    fig_count=fig_count+1;
    figure(fig_count)
    hold on
    for k=1:run
        if up_down(k) == 1
            p1 = plot(data_coef_corr(:,2,k),data_coef_corr(:,j,k),'ro','DisplayName','upward sweep, adj');
            p3 = plot(data_coef_nbc(:,2,k),data_coef_nbc(:,j,k),'ko','DisplayName','upward sweep, raw');
        elseif up_down(k) == 0
            p2 = plot(data_coef_corr(:,2,k),data_coef_corr(:,j,k),'r+','DisplayName','downward sweep, adj');
            p4 = plot(data_coef_nbc(:,2,k),data_coef_nbc(:,j,k),'k+','DisplayName','downward sweep, raw');
        else
            plot(data_coef_corr(:,2,k),data_coef_corr(:,j,k),'kx','DisplayName','allweird sweep, adj')
            plot(data_coef_nbc(:,2,k),data_coef_nbc(:,j,k),'kx','DisplayName','allweird sweep, raw');
        end
    end
    xlabel('\alpha (deg)')
    xlim([0,25])
    ylabel(col_name(j))
    ylim(ylimits(j-2,:))
    legend([p1,p2,p3,p4],'Location',legend_location(j-2))
    title(strcat("unadjusted v. adjusted data, ",'U = ',num2str(mean_speed,3),' m/s ',' Re = ',num2str(Re,3)))
end
%}
%% plot adjusted v. reference coefficients
%{
%for j=3:col %cycle through cd,cl,cm
for j=3:4
    fig_count=fig_count+1;
    figure(fig_count);
    for k=1:run
        if up_down(k) == 1
            p1 = plot(data_coef_corr(:,2,k),data_coef_corr(:,j,k),'ro','DisplayName','control');
             p2 = plot([],'HandleVisibility','off'); %this avoids error in legend by making sure a plot p2 exists even if there is no downward sweep data
        elseif up_down(k) == 0
            p1 = plot(data_coef_corr(:,2,k),data_coef_corr(:,j,k),'ro','DisplayName','downward sweep');
%             p1 = plot([],'HandleVisibility','off'); %this avoids error in legend by making sure a plot p1 exists even if there is no upward sweep data
        else
            plot(data_coef_corr(:,2,k),data_coef_corr(:,j,k),'rx','DisplayName','allweird sweep')
        end
        hold on
    end
    if j==3 %if plotting cd
        p3 = plot(data_ref_cd(:,1),data_ref_cd(:,2),'bo','DisplayName',"Sheldahl '78*");
        cdo = 0.0044 + 0.018*Re^(-0.15); %estimate for cdo for 10^6<RE<3*10^7 given in McCroskey "Critical Assessment of Wind Tunnel Results of NACA 0012"
%         p4 = plot(0,cdo,'gd','DisplayName','cdo (empirical estimate)');
        p4 = plot([],'HandleVisibility','off'); %use this to aviod error in legend if not plotting cdo
    elseif j==4 %if plotting cl
        p3 = plot(data_ref_cl(:,1),data_ref_cl(:,2),'bo','DisplayName',"Sheldahl '78*");
        cla = 0.1025 + 0.00485*log(Re/10^6); %empirical curve fit for lift curve slope (/deg) prestall for NACA 0012 +-2% from McCroskey "Critical Assement..."
        x=linspace(0,10);
        y=x*cla;
        p4 = plot(x,y,'g:','DisplayName','cla (empirical estimate)');
%         p4 = plot([],'HandleVisibility','off'); %use this to aviod error in legend if not plotting cla
    elseif j==5 %if plotting cm
        p3 = plot(data_ref_cm(:,1),data_ref_cm(:,3),'bo','DisplayName','ref. data (up sweep)');
        p4 = plot(data_ref_cm(:,1),data_ref_cm(:,2),'b+','DisplayName','ref. data (down sweep)');
    end
    xlabel('\alpha (deg)')
    xlim([0,25])
    ylabel(col_name(j))
    ylim(ylimits(j-2,:))
    legend([p1,p2,p3,p4],'Location',legend_location(j-2))
    title(strcat("adjusted data v. ref data, ",'U = ',num2str(mean_speed,3),' m/s ',' Re = ',num2str(Re,3)))
%     % Set axes font
%     ax = axes('Parent',fig);
end
%}
%% plot mean of adjusted v. reference coefficients
%{
% for j=3:col %cycle through cd,cl,cm
for j=3:4
    fig_count=fig_count+1;
    figure(fig_count);
%     p1 = errorbar(data_coef_corr_mean(:,2),data_coef_corr_mean(:,j)*1.154,u(:,j),'ro','DisplayName','control');
    p1 = errorbar(data_coef_corr_mean(:,2),data_coef_corr_mean(:,j),u(:,j),'ro','DisplayName','control');
    hold on
    if j==3 %if plotting cd
        p3 = plot(data_ref_cd(:,1),data_ref_cd(:,2),'bo','DisplayName',"Sheldahl '78^3");
        cdo = 0.0044 + 0.018*Re^(-0.15); %estimate for cdo for 10^6<RE<3*10^7 given in McCroskey "Critical Assessment of Wind Tunnel Results of NACA 0012"
        p4 = plot(0,cdo,'kd','DisplayName',"c_{d0} McCroskey '88^4");
        %p4 = plot([],'HandleVisibility','off'); %use this to avoid error in legend if not plotting cdo
    elseif j==4 %if plotting cl
        p3 = plot(data_ref_cl(:,1),data_ref_cl(:,2),'bo','DisplayName',"Sheldahl '78^3");
        cla = 0.1025 + 0.00485*log(Re/10^6); %empirical curve fit for lift curve slope (/deg) prestall for NACA 0012 +-2% from McCroskey "Critical Assement..."
        x=linspace(0,10);
        y=x*cla;
        p4 = plot(x,y,'k:','DisplayName',"c_{l\alpha} McCroskey '88^4");
%         p4 = plot([],'HandleVisibility','off'); %use this to aviod error in legend if not plotting cla
    elseif j==5 %if plotting cm
        p3 = plot(data_ref_cm(:,1),data_ref_cm(:,3),'bo','DisplayName','ref. data (up sweep)');
        p4 = plot(data_ref_cm(:,1),data_ref_cm(:,2),'b+','DisplayName','ref. data (down sweep)');
    end
    xlabel('\alpha (deg)')
    xlim([0,25])
    ylabel(col_name(j))
    ylim(ylimits(j-2,:))
    legend([p1,p3,p4],'Location',legend_location(j-2))
    title(strcat("mean adjusted data v. ref data, ",'U = ',num2str(mean_speed,3),' m/s ',' Re = ',num2str(Re,3)))
%     % Set axes font
%     ax = axes('Parent',fig);
end
%}
%% plot mean of adjusted v. reference v. calibrated coefficients
% {
% for j=3:col %cycle through cd,cl,cm
for j=3:4
    fig_count=fig_count+1;
    figure(fig_count);
    %     p1 = errorbar(data_coef_corr_mean(:,2),data_coef_corr_mean(:,j)*1.154,u(:,j),'ro','DisplayName','control');
    p1 = errorbar(data_coef_corr_mean(:,2),data_coef_corr_mean(:,j),u(:,j),'ro','DisplayName','raw measured');
    hold on
    p2 = errorbar(data_coef_corr_mean_fix(:,2),data_coef_corr_mean_fix(:,j),u_fix(:,j),'k^','DisplayName','calibrated meas.');
    if j==3 %if plotting cd
        p3 = plot(data_ref_cd(:,1),data_ref_cd(:,2),'bo','DisplayName',"Sheldahl '78^3");
        cdo = 0.0044 + 0.018*Re^(-0.15); %estimate for cdo for 10^6<RE<3*10^7 given in McCroskey "Critical Assessment of Wind Tunnel Results of NACA 0012"
        p4 = plot(0,cdo,'kd','DisplayName',"c_{d0} McCroskey '88^4");
        %p4 = plot([],'HandleVisibility','off'); %use this to avoid error in legend if not plotting cdo
    elseif j==4 %if plotting cl
        p3 = plot(data_ref_cl(:,1),data_ref_cl(:,2),'bo','DisplayName',"Sheldahl '78^3");
        cla = 0.1025 + 0.00485*log(Re/10^6); %empirical curve fit for lift curve slope (/deg) prestall for NACA 0012 +-2% from McCroskey "Critical Assement..."
        x=linspace(0,10);
        y=x*cla;
        p4 = plot(x,y,'k:','DisplayName',"c_{l\alpha} McCroskey '88^4");
        %         p4 = plot([],'HandleVisibility','off'); %use this to aviod error in legend if not plotting cla
    elseif j==5 %if plotting cm
        p3 = plot(data_ref_cm(:,1),data_ref_cm(:,3),'bo','DisplayName','ref. data (up sweep)');
        p4 = plot(data_ref_cm(:,1),data_ref_cm(:,2),'b+','DisplayName','ref. data (down sweep)');
    end
    xlabel('\alpha (deg)')
    xlim([0,25])
    ylabel(col_name(j))
    ylim(ylimits(j-2,:))
    legend('Location',legend_location(j-2))
    title(strcat("mean adjusted data v. ref data, ",'U = ',num2str(mean_speed,3),' m/s ',' Re = ',num2str(Re,3)))
    %     % Set axes font
    %     ax = axes('Parent',fig);
end
%}